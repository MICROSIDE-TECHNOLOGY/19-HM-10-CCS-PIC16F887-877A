CCS PCM C Compiler, Version 5.115d, 1               30-ago.-23 11:57
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\19-HM-10-CCS-PIC16F887-877A\Proyecto\PIC16F877A\Bluetooth HM-10.lst

               ROM used:   188 words (2%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           12 (3%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   06B
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... Bluetooth HM-10.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Esta práctica consiste en realizar el envio de datos por medio de un módulo
.................... Bluetooth, usando el protocolo de comunicación serial UART, para enviar un
.................... comando simple para prender y apagar un LED incluido en la tarjeta X-TRAINER,
.................... y un segundo comando para preguntar el estado de un botón.
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F877A.h>                     // Incluye el microcontrolador con el que se va a trabajar
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  DATA CC,22
0005:  DATA 44,10
0006:  DATA 41,28
0007:  DATA C1,23
0008:  DATA 41,22
0009:  DATA CF,06
000A:  DATA 0A,00
000B:  DATA CC,22
000C:  DATA 44,10
000D:  DATA 45,27
000E:  DATA C3,22
000F:  DATA 4E,22
0010:  DATA 49,22
0011:  DATA CF,06
0012:  DATA 0A,00
0013:  MOVF   0B,W
0014:  MOVWF  23
0015:  BCF    0B.7
0016:  BSF    03.5
0017:  BSF    03.6
0018:  BSF    0C.7
0019:  BSF    0C.0
001A:  NOP
001B:  NOP
001C:  BCF    03.5
001D:  BCF    03.6
001E:  BTFSC  23.7
001F:  BSF    0B.7
0020:  BSF    03.6
0021:  MOVF   0C,W
0022:  ANDLW  7F
0023:  BTFSC  03.2
0024:  GOTO   069
0025:  BCF    03.6
0026:  MOVWF  23
0027:  BSF    03.6
0028:  MOVF   0D,W
0029:  BCF    03.6
002A:  MOVWF  24
002B:  BSF    03.6
002C:  MOVF   0F,W
002D:  BCF    03.6
002E:  MOVWF  25
002F:  MOVF   23,W
0030:  BTFSS  0C.4
0031:  GOTO   030
0032:  MOVWF  19
0033:  MOVF   24,W
0034:  BSF    03.6
0035:  MOVWF  0D
0036:  BCF    03.6
0037:  MOVF   25,W
0038:  BSF    03.6
0039:  MOVWF  0F
003A:  BCF    03.6
003B:  MOVF   0B,W
003C:  MOVWF  26
003D:  BCF    0B.7
003E:  BSF    03.5
003F:  BSF    03.6
0040:  BSF    0C.7
0041:  BSF    0C.0
0042:  NOP
0043:  NOP
0044:  BCF    03.5
0045:  BCF    03.6
0046:  BTFSC  26.7
0047:  BSF    0B.7
0048:  BSF    03.6
0049:  RLF    0C,W
004A:  RLF    0E,W
004B:  ANDLW  7F
004C:  BTFSC  03.2
004D:  GOTO   069
004E:  BCF    03.6
004F:  MOVWF  23
0050:  BSF    03.6
0051:  MOVF   0D,W
0052:  BCF    03.6
0053:  MOVWF  24
0054:  BSF    03.6
0055:  MOVF   0F,W
0056:  BCF    03.6
0057:  MOVWF  25
0058:  MOVF   23,W
0059:  BTFSS  0C.4
005A:  GOTO   059
005B:  MOVWF  19
005C:  MOVF   24,W
005D:  BSF    03.6
005E:  MOVWF  0D
005F:  BCF    03.6
0060:  MOVF   25,W
0061:  BSF    03.6
0062:  MOVWF  0F
0063:  INCF   0D,F
0064:  BTFSC  03.2
0065:  INCF   0F,F
0066:  BCF    03.6
0067:  GOTO   013
0068:  BSF    03.6
0069:  BCF    03.6
006A:  RETURN
.................... 
.................... #list
.................... 
.................... #use delay( clock = 20Mhz, crystal )     // Tipo de oscilador y frecuencia dependiendo del microcontrolador
.................... 
.................... //-------------------------------------------------------------------------------
.................... #USE RS232( stream = SERIE, BAUD = 9600, PARITY = N, XMIT = PIN_C6, RCV = PIN_C7, BITS = 8 )
.................... 
.................... #define LED pin_A1
.................... #define Boton pin_A2
.................... 
.................... void main( void ) {
006B:  MOVF   03,W
006C:  ANDLW  1F
006D:  MOVWF  03
006E:  MOVLW  81
006F:  BSF    03.5
0070:  MOVWF  19
0071:  MOVLW  A6
0072:  MOVWF  18
0073:  MOVLW  90
0074:  BCF    03.5
0075:  MOVWF  18
0076:  CLRF   21
0077:  CLRF   20
0078:  BSF    03.5
0079:  BSF    1F.0
007A:  BSF    1F.1
007B:  BSF    1F.2
007C:  BCF    1F.3
007D:  MOVLW  07
007E:  MOVWF  1C
007F:  BCF    03.7
.................... 
....................    while ( !kbhit() ) {                  // Pregunta si hay algun dato recibido
0080:  BCF    03.5
0081:  BTFSC  0C.5
0082:  GOTO   0BB
.................... 
....................       while ( 1 ) {
....................          char Caracter = getc();         // Guarda el caracter
0083:  BTFSS  0C.5
0084:  GOTO   083
0085:  MOVF   1A,W
0086:  MOVWF  22
.................... 
....................          if ( Caracter == '0' ) {
0087:  MOVF   22,W
0088:  SUBLW  30
0089:  BTFSS  03.2
008A:  GOTO   097
....................             output_low( LED );           // Apaga el LED
008B:  BSF    03.5
008C:  BCF    05.1
008D:  BCF    03.5
008E:  BCF    05.1
....................             fprintf( SERIE, "LED APAGADO\r\n" );
008F:  MOVLW  04
0090:  BSF    03.6
0091:  MOVWF  0D
0092:  MOVLW  00
0093:  MOVWF  0F
0094:  BCF    03.6
0095:  CALL   013
....................          } else if ( Caracter == '1' ) {
0096:  GOTO   0B9
0097:  MOVF   22,W
0098:  SUBLW  31
0099:  BTFSS  03.2
009A:  GOTO   0A7
....................             output_HIGH( LED );          // Enciende el LED
009B:  BSF    03.5
009C:  BCF    05.1
009D:  BCF    03.5
009E:  BSF    05.1
....................             fprintf( SERIE, "LED ENCENDIDO\r\n" );
009F:  MOVLW  0B
00A0:  BSF    03.6
00A1:  MOVWF  0D
00A2:  MOVLW  00
00A3:  MOVWF  0F
00A4:  BCF    03.6
00A5:  CALL   013
....................          } else if ( Caracter == '?' ) { 
00A6:  GOTO   0B9
00A7:  MOVF   22,W
00A8:  SUBLW  3F
00A9:  BTFSS  03.2
00AA:  GOTO   0B9
.................... 
....................             if ( 1 == input( Boton ) ) { // Pregunta el estado del botón
00AB:  BSF    03.5
00AC:  BSF    05.2
00AD:  BCF    03.5
00AE:  BTFSS  05.2
00AF:  GOTO   0B5
....................                Printf( "0" );            // Envía un 0 si el botón no está presionado
00B0:  MOVLW  30
00B1:  BTFSS  0C.4
00B2:  GOTO   0B1
00B3:  MOVWF  19
....................             } else {
00B4:  GOTO   0B9
....................                Printf( "1" );            // Envía un 1 si el botón está presionado
00B5:  MOVLW  31
00B6:  BTFSS  0C.4
00B7:  GOTO   0B6
00B8:  MOVWF  19
....................             }
....................          }
00B9:  GOTO   083
....................       }
00BA:  GOTO   081
....................    } 
.................... }
00BB:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
